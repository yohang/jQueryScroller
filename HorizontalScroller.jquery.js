// Generated by CoffeeScript 1.3.3
(function() {

  if (!(window.fw != null)) {
    window.fw = {};
  }

  (function($) {
    window.fw.HorizontalScroller = (function() {
      var baseOptions;

      baseOptions = {
        scrollStep: 150,
        offset: 0,
        mousewheel: true,
        scrollbar: true,
        scrollerSelector: '[data-scroller=scroller]',
        contentSelector: '[data-scroller=content]',
        innerContentSelector: '[data-scroller=innercontent]',
        previousSelector: '[data-scroller=previous]',
        nextSelector: '[data-scroller=next]',
        draggerContainerSelector: '[data-scroller=dragger-container]',
        draggerSelector: '[data-scroller=dragger]',
        scrollerStyles: {
          position: 'relative',
          top: 0,
          left: 0,
          overflow: 'hidden'
        },
        contentStyles: {
          position: 'absolute',
          top: 0,
          left: 0
        },
        draggerContainerStyles: {
          position: 'relative',
          top: 0,
          left: 0
        },
        draggerStyles: {
          position: 'absolute',
          top: 0,
          left: 0,
          'max-width': '100%'
        },
        animateOptions: {
          duration: 500
        }
      };

      function HorizontalScroller(container, options) {
        if (options == null) {
          options = {};
        }
        this.options = $.extend({}, baseOptions, options);
        this.$container = $(container);
        this.$scroller = this.$container.find(this.options.scrollerSelector);
        this.$content = this.$scroller.find(this.options.contentSelector);
        this.$innerContent = this.$content.find(this.options.innerContentSelector);
        this.currentPos = 0;
        this.$content.width('999999px');
        this.contentWidth = this.$innerContent.width() + this.options.offset;
        this.$content.width(this.contentWidth);
        this.scrollerWidth = this.$scroller.width();
        this.maxPos = this.contentWidth - this.scrollerWidth;
        this.$scroller.css(this.options.scrollerStyles);
        this.$content.css(this.options.contentStyles);
        this.$container.delegate(this.options.previousSelector, 'click', this.previous.bind(this, 1));
        this.$container.delegate(this.options.nextSelector, 'click', this.next.bind(this, 1));
        if (this.options.mousewheel) {
          this.$container.bind('mousewheel', this.onMousewheel.bind(this));
        }
        if (this.options.scrollbar) {
          this.initScrollbar();
        }
      }

      HorizontalScroller.prototype.initScrollbar = function() {
        var _this = this;
        this.$draggerContainer = this.$container.find(this.options.draggerContainerSelector);
        this.$dragger = this.$draggerContainer.find(this.options.draggerSelector);
        this.scrollbarWidth = Math.round((this.scrollerWidth / this.contentWidth) * 100);
        this.$draggerContainer.css(this.options.draggerContainerStyles);
        this.$dragger.css($.extend({}, this.options.draggerStyles, {
          width: this.scrollbarWidth + '%'
        }));
        this.$dragger.draggable({
          axis: 'x',
          containment: this.$draggerContainer,
          drag: function(event, ui) {
            return _this.slideTo((ui.position.left / _this.$draggerContainer.width()) * _this.contentWidth, false, false);
          }
        });
        return $(this).bind('slide', function() {
          return _this.$dragger.stop().animate({
            left: (_this.currentPos / _this.contentWidth) * 100 + '%'
          }, _this.options.animateOptions);
        });
      };

      HorizontalScroller.prototype.slideTo = function(pos, triggerEvent, animate) {
        if (triggerEvent == null) {
          triggerEvent = true;
        }
        if (animate == null) {
          animate = true;
        }
        if (pos > this.maxPos) {
          pos = this.maxPos;
        }
        if (pos < 0) {
          pos = 0;
        }
        this.currentPos = pos;
        if (animate) {
          this.$content.stop().animate({
            left: (-pos) + 'px'
          }, this.options.animateOptions);
        } else {
          this.$content.css({
            left: (-pos) + 'px'
          });
        }
        if (triggerEvent) {
          return $(this).trigger('slide');
        }
      };

      HorizontalScroller.prototype.next = function(offset) {
        if (offset == null) {
          offset = 1;
        }
        return this.slideTo(this.currentPos + this.options.scrollStep * offset);
      };

      HorizontalScroller.prototype.previous = function(offset) {
        if (offset == null) {
          offset = 1;
        }
        return this.slideTo(this.currentPos - this.options.scrollStep * offset);
      };

      HorizontalScroller.prototype.onMousewheel = function(event, delta) {
        this[delta < 0 ? 'previous' : 'next'](Math.abs(delta));
        return false;
      };

      return HorizontalScroller;

    })();
    return $.fn.horizontalScroller = function(option) {
      var args;
      args = arguments;
      return this.each(function() {
        var $this, data;
        $this = $(this);
        data = $this.data('fw.scroller');
        if (!(data != null)) {
          $this.data('fw.scroller', data = new window.fw.HorizontalScroller($this, option));
        }
        if (data && typeof option === 'string' && typeof data[option] === 'function') {
          return data[option].apply(data, [].slice.call(args, 1));
        }
      });
    };
  })(jQuery);

}).call(this);
